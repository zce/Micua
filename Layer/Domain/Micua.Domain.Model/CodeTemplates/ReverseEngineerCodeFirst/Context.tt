<#@ template hostspecific="true" language="C#" #><#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    efHost.Namespace="Micua.Domain.Model";
    efHost.MappingNamespace="Micua.Domain.Model.Mapping";
    var code = new CodeGenerationTools(this);
#>// +----------------------------------------------------------------------
// | Micua [ DO IT BATTER ! ]
// +----------------------------------------------------------------------
// | Copyright © 2014 Wedn.Net. All Rights Reserved.
// +----------------------------------------------------------------------
// | Summary : <#= efHost.EntityContainer.Name #>（数据库上下文）
// +----------------------------------------------------------------------
// | Author  : iceStone <ice@wedn.net>
// +----------------------------------------------------------------------

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
	using System.Data.Entity;
	using System.Data.Entity.Infrastructure;
	using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

    /// <summary>
    /// <#= efHost.EntityContainer.Name #>（数据库上下文）
    /// </summary>
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        /// <summary>
        /// 唤醒状态
        /// </summary>
        static bool IsWarmUp;

        /// <summary>
        /// 表名前缀
        /// </summary>
        internal static string TablePrefix;

        /// <summary>
        /// 表名是否转换成复数
        /// </summary>
        internal static bool TableNameToPlural;

        /// <summary>
        /// 列名前缀
        /// </summary>
        internal static string ColumnPrefix;

        #region Constructors
        
        /// <summary>
        /// 静态构造函数，用于初始化数据库、暖机等初始化操作
        /// </summary>
        static <#= efHost.EntityContainer.Name #>()
        {
            // 如果数据库不存在则创建数据库
            Database.SetInitializer(new CreateDatabaseIfNotExists<<#= efHost.EntityContainer.Name #>>());
            // 模型发生变化时先删除数据库再创建数据库
            // Database.SetInitializer(new DropCreateDatabaseIfModelChanges<<#= efHost.EntityContainer.Name #>>());
            // 总是先删除数据库再创建数据库
            // Database.SetInitializer(new DropCreateDatabaseAlways<<#= efHost.EntityContainer.Name #>>());
            // 无操作
            // Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        /// <summary>
        /// 可以将给定字符串用作将连接到的数据库的名称或连接字符串来构造一个新的上下文实例。请参见有关这如何用于创建连接的类备注。
        /// </summary>
        public <#= efHost.EntityContainer.Name #>() : this("name=<#= efHost.EntityContainer.Name #>") { }

        /// <summary>
        /// 可以将给定字符串用作将连接到的数据库的名称或连接字符串来构造一个新的上下文实例。请参见有关这如何用于创建连接的类备注。
        /// </summary>
        /// <param name="nameOrConnectionString">连接字符串名称或连接字符串</param>
        /// <param name="tablePrefix">表名前缀（默认为空）</param>
        /// <param name="tableToPlural">表名是否转换成复数（默认为false）</param>
        /// <param name="columnPrefix">列名前缀（默认为空）</param>
        public <#= efHost.EntityContainer.Name #>Context(string nameOrConnectionString, string tablePrefix = "", bool tableToPlural = false, string columnPrefix = "")
            : base(nameOrConnectionString)
        {
            WarmUp(nameOrConnectionString);
            TablePrefix = tablePrefix;
            TableNameToPlural = tableToPlural;
            ColumnPrefix = columnPrefix;
        }

        #endregion
        
        #region Properties

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        /// <summary>
        /// Get or set <#= set.ElementType.Name #> DbSet.
        /// </summary>
        public DbSet<<#= set.ElementType.Name #>> <#= set.Name #> { get; set; }
<#
    }
#>

        #endregion

        #region Methods

        /// <summary>
        /// 在完成对派生上下文的模型的初始化后，并在该模型已锁定并用于初始化上下文之前，将调用此方法。
        /// 虽然此方法的默认实现不执行任何操作，但可在派生类中重写此方法，这样便能在锁定模型之前对其进行进一步的配置。
        /// </summary>
        /// <param name="modelBuilder">定义要创建的上下文的模型的生成器。</param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>Map());
<#
    }
#>
        }
		
        /// <summary>
        /// 根据表名规则生成表名
        /// </summary>
        /// <param name="input">实体名</param>
        /// <returns>表名</returns>
        public static string GetTableName(string input)
        {
            var ps = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us"));
            if (TableNameToPlural && ps.IsSingular(input))
            {
                input = ps.Pluralize(input);
            }
            return TablePrefix.ToLower() + input.ToUnderlineCase();
        }

        /// <summary>
        /// 根据列名规则生成列名
        /// </summary>
        /// <param name="input">属性名</param>
        /// <returns>列名</returns>
        public static string GetColumnName(string input)
        {
            return ColumnPrefix.ToLower() + input.ToUnderlineCase();
        }

        /// <summary>
        /// EntityFramework预热操作
        /// </summary>
        /// <param name="nameOrConnectionString"></param>
        public static void WarmUp(string nameOrConnectionString)
        {
            if (!IsWarmUp) return;
            //EF暖机操作;
            using (MicuaContext db = new MicuaContext(nameOrConnectionString))
            {
                var objectContext = ((IObjectContextAdapter)db).ObjectContext;
                var mappingCollection = (System.Data.Entity.Core.Mapping.StorageMappingItemCollection)objectContext.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace);
                mappingCollection.GenerateViews(new System.Collections.Generic.List<System.Data.Entity.Core.Metadata.Edm.EdmSchemaError>());
            }
            IsWarmUp = true;
        }

        #endregion
    }
}

<#+
///<summary>
/// equiv of PHP's var dump for an object’s properties because i cbf writing all the properties out.
///</summary>
///<param name="info"></param>
public static string var_dump(object info)
{
StringBuilder sb = new StringBuilder();

Type t = info.GetType();
PropertyInfo[] props = t.GetProperties();
sb.AppendFormat("{0} {1}\r\n", "Name", "Value");
foreach (PropertyInfo prop in props)
{
sb.AppendFormat("{0}\r\n", prop.Name);
}

return sb.ToString();
}


#>